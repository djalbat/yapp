"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.parserFromRules = parserFromRules;
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _occamGrammarUtilities = require("occam-grammar-utilities");
var _rules = require("../utilities/rules");
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function parserFromRules(Class, rules) {
    var ruleMap = (0, _rules).ruleMapFromRules(rules);
    var startRule = (0, _rules).startRuleFromRules(rules);
    startRule = (0, _occamGrammarUtilities).eliminateLeftRecursion(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5pbXBvcnQgeyBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIH0gZnJvbSBcIm9jY2FtLWdyYW1tYXItdXRpbGl0aWVzXCI7XG5cbmltcG9ydCB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcnVsZXNcIjtcblxuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZXJGcm9tUnVsZXMoQ2xhc3MsIHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBsZXQgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBzdGFydFJ1bGUgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgY29uc3QgcGFyc2VyID0gbmV3IENsYXNzKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn1cbiJdLCJuYW1lcyI6WyJydWxlc0Zyb21CTkYiLCJwYXJzZXJGcm9tUnVsZXMiLCJibmZMZXhlciIsIkJORkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJCTkZQYXJzZXIiLCJibmYiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXMiLCJydWxlc0Zyb21Ub2tlbnMiLCJDbGFzcyIsInJ1bGVNYXAiLCJydWxlTWFwRnJvbVJ1bGVzIiwic3RhcnRSdWxlIiwic3RhcnRSdWxlRnJvbVJ1bGVzIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInBhcnNlciJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBWUdBLFlBQVksR0FBWkEsWUFBWTtRQU9aQyxlQUFlLEdBQWZBLGVBQWU7QUFqQk4sSUFBQSxZQUFjLFdBQWQsY0FBYyxDQUFBO0FBQ2IsSUFBQSxhQUFlLFdBQWYsZUFBZSxDQUFBO0FBQ0YsSUFBQSxzQkFBeUIsV0FBekIseUJBQXlCLENBQUE7QUFFWCxJQUFBLE1BQW9CLFdBQXBCLG9CQUFvQixDQUFBO0FBR3pFLElBQU1DLFFBQVEsR0FBR0MsWUFBUSxTQUFBLENBQUNDLFdBQVcsRUFBRSxFQUNqQ0MsU0FBUyxHQUFHQyxhQUFTLFVBQUEsQ0FBQ0YsV0FBVyxFQUFFLEFBQUM7QUFFbkMsU0FBU0osWUFBWSxDQUFDTyxHQUFHLEVBQUU7SUFDaEMsSUFBTUMsTUFBTSxHQUFHTixRQUFRLENBQUNPLGFBQWEsQ0FBQ0YsR0FBRyxDQUFDLEVBQ3BDRyxLQUFLLEdBQUdMLFNBQVMsQ0FBQ00sZUFBZSxDQUFDSCxNQUFNLENBQUMsQUFBQztJQUVoRCxPQUFPRSxLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNULGVBQWUsQ0FBQ1csS0FBSyxFQUFFRixLQUFLLEVBQUU7SUFDNUMsSUFBTUcsT0FBTyxHQUFHQyxDQUFBQSxHQUFBQSxNQUFnQixBQUFPLENBQUEsaUJBQVAsQ0FBQ0osS0FBSyxDQUFDLEFBQUM7SUFFeEMsSUFBSUssU0FBUyxHQUFHQyxDQUFBQSxHQUFBQSxNQUFrQixBQUFPLENBQUEsbUJBQVAsQ0FBQ04sS0FBSyxDQUFDLEFBQUM7SUFFMUNLLFNBQVMsR0FBR0UsQ0FBQUEsR0FBQUEsc0JBQXNCLEFBQW9CLENBQUEsdUJBQXBCLENBQUNGLFNBQVMsRUFBRUYsT0FBTyxDQUFDLENBQUM7SUFFdkQsSUFBTUssTUFBTSxHQUFHLElBQUlOLEtBQUssQ0FBQ0csU0FBUyxFQUFFRixPQUFPLENBQUMsQUFBQztJQUU3QyxPQUFPSyxNQUFNLENBQUM7Q0FDZiJ9