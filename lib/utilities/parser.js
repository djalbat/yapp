"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.parserFromRules = parserFromRules;
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _occamGrammarUtilities = require("occam-grammar-utilities");
var _rules = require("../utilities/rules");
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function parserFromRules(Class, rules) {
    var ruleMap = (0, _rules).ruleMapFromRules(rules);
    var startRule = (0, _rules).startRuleFromRules(rules);
    startRule = (0, _occamGrammarUtilities).eliminateLeftRecursion(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5pbXBvcnQgeyBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIH0gZnJvbSBcIm9jY2FtLWdyYW1tYXItdXRpbGl0aWVzXCI7XG5cbmltcG9ydCB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcnVsZXNcIjtcblxuY29uc3QgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21CTkYoYm5mKSB7XG4gIGNvbnN0IHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXMgPSBibmZQYXJzZXIucnVsZXNGcm9tVG9rZW5zKHRva2Vucyk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VyRnJvbVJ1bGVzKENsYXNzLCBydWxlcykge1xuICBjb25zdCBydWxlTWFwID0gcnVsZU1hcEZyb21SdWxlcyhydWxlcyk7XG5cbiAgbGV0IHN0YXJ0UnVsZSA9IHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcyk7XG5cbiAgc3RhcnRSdWxlID0gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIGNvbnN0IHBhcnNlciA9IG5ldyBDbGFzcyhzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIHJldHVybiBwYXJzZXI7XG59XG4iXSwibmFtZXMiOlsicnVsZXNGcm9tQk5GIiwicGFyc2VyRnJvbVJ1bGVzIiwiYm5mTGV4ZXIiLCJCTkZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiQk5GUGFyc2VyIiwiYm5mIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwiQ2xhc3MiLCJydWxlTWFwIiwicnVsZU1hcEZyb21SdWxlcyIsInN0YXJ0UnVsZSIsInN0YXJ0UnVsZUZyb21SdWxlcyIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJwYXJzZXIiXSwibWFwcGluZ3MiOiJBQUFBLENBQVksV0FBQSxDQUFDOzs7RTtRQVdHQSxZQUFZLEdBQVpBLFlBQVksQTtRQU9aQyxlQUFlLEdBQWZBLGVBQWUsQTtBQWhCTixHQUFjLENBQWQsWUFBYztBQUNiLEdBQWUsQ0FBZixhQUFlO0FBQ0YsR0FBeUIsQ0FBekIsc0JBQXlCO0FBRVgsR0FBb0IsQ0FBcEIsTUFBb0I7QUFFekUsR0FBSyxDQUFDQyxRQUFRLEdBQUdDLFlBQVEsVUFBQ0MsV0FBVyxJQUMvQkMsU0FBUyxHQUFHQyxhQUFTLFdBQUNGLFdBQVc7U0FFdkJKLFlBQVksQ0FBQ08sR0FBRyxFQUFFLENBQUM7SUFDakMsR0FBSyxDQUFDQyxNQUFNLEdBQUdOLFFBQVEsQ0FBQ08sYUFBYSxDQUFDRixHQUFHLEdBQ25DRyxLQUFLLEdBQUdMLFNBQVMsQ0FBQ00sZUFBZSxDQUFDSCxNQUFNO0lBRTlDLE1BQU0sQ0FBQ0UsS0FBSztBQUNkLENBQUM7U0FFZVQsZUFBZSxDQUFDVyxLQUFLLEVBQUVGLEtBQUssRUFBRSxDQUFDO0lBQzdDLEdBQUssQ0FBQ0csT0FBTyxPQUFHQyxNQUFnQixtQkFBQ0osS0FBSztJQUV0QyxHQUFHLENBQUNLLFNBQVMsT0FBR0MsTUFBa0IscUJBQUNOLEtBQUs7SUFFeENLLFNBQVMsT0FBR0Usc0JBQXNCLHlCQUFDRixTQUFTLEVBQUVGLE9BQU8sQ0FBQyxDQUFDO0lBRXZELEdBQUssQ0FBQ0ssTUFBTSxHQUFHLEdBQUcsQ0FBQ04sS0FBSyxDQUFDRyxTQUFTLEVBQUVGLE9BQU87SUFFM0MsTUFBTSxDQUFDSyxNQUFNO0FBQ2YsQ0FBQyJ9